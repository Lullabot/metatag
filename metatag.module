<?php
/**
 * Hook implementations for metatag module.
 */

/**
 * Implements hook_page_attachments().
 *
 * Load all meta tags for this page.
 */
function metatag_page_attachments(array &$attachments) {
  $metatags = metatag_get_tags_from_route();

  if (!empty($metatags)) {
    // Load all tag plugins.
    $tag_manager = \Drupal::service('plugin.manager.metatag.tag');
    $tags = $tag_manager->getDefinitions();
    // Remove the title tag as it is processed at metatag_preprocess_html().
    unset($tags['title']);

    // Loop plugins and render them.
    foreach ($tags as $tag_id => $tag_definition) {
      $tag = $tag_manager->createInstance($tag_id);
      // If the config_entity has a value for this tag, set it.
      if (isset($metatags[$tag_id])) {
        $tag->setValue($metatags[$tag_id]);
        $metatags[$tag_id] = $tag->render();
        $attachments['#attached']['html_head'][] = [$tag->render(), $tag_id];
      }
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function metatag_preprocess_html(array &$variables) {
  // Alter the page title.
  $metatags = metatag_get_tags_from_route();
  if (!empty($metatags)) {
    if (isset($metatags['title'])) {
      $processed_title = \Drupal::token()->replace($metatags['title']);
      $variables['head_title'] = array('metatag' => $processed_title);
    }
  }
}

/**
 * Load the meta tags by processing the route parameters.
 *
 * @return array()
 *   All of the meta tags identified for the header.
 */
function metatag_get_tags_from_route() {
  $metatags = entity_load('metatag_defaults', 'global');

  // Load the current route.
  $route_match = \Drupal::routeMatch();

  // Look for a canonical entity view page, e.g. node/{nid}, user/{uid}, etc.
  $entity_type = metatag_is_supported_route($route_match->getRouteName());

  // Check if there are default metatags for this entity type.
  if (!empty($entity_type)) {
    $entity_metatags = entity_load('metatag_defaults', $entity_type);
    if ($entity_metatags != NULL) {
      $metatags->set('tags', array_merge($metatags->get('tags'), $entity_metatags->get('tags')));
    }
  }

  return $metatags->get('tags');
}

/**
 * Identify whether a route is supported by the module.
 *
 * @param string $route_name
 *
 * @return bool
 */
function metatag_is_supported_route($route_name) {
  $supported = FALSE;

  // Look for a canonical entity view page, e.g. node/{nid}, user/{uid}, etc.
  $matches = array();

  preg_match('/entity\.(.*)\.canonical/', $route_name, $matches);
  if (!empty($matches[1])) {
    $supported = $matches[1];
  }

  return $supported;
}

